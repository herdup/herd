var Asset = function(index) {
  this.asset_index = index;
}

var Uploader = function (element) {
  this.Asset          = Asset;
  this.assets         = [];
  this.element        = element;
  this.assetable_id   = element.getAttribute("data-assetable-id");
  this.assetable_type = element.getAttribute("data-assetable-type");
  this.setupAssetList();
  this.setupButtons();
  element.setAttribute("data-instantiated", "true");
};

Uploader.prototype.setupAssetList = function() {
  var list = this.element.querySelector("section ul");
  var fileFields = list.querySelectorAll('input[type="file"]');
  for (var i = 0; i < fileFields.length; i++) {
    var fileField = fileFields[i];
    var parts     = fileField.getAttribute('id').split('_')
    var assetId   = parts[parts.length - 2];
    this.assets.push(new this.Asset(assetId));
  }
};

Uploader.prototype.setupButtons = function() {
  var button = this.element.querySelector("button");
  button.onclick = this.addAsset.bind(this);
};

Uploader.prototype.addAsset = function(e) {
  e.preventDefault();
  var list = this.element.querySelector("section ul");
  var newAsset = new this.Asset(this.assets.length);
  this.assets.push(newAsset);
  var tag = this.createTagForAsset(newAsset);
  list.appendChild(tag);
};

Uploader.prototype.createTagForAsset = function(asset) {
  var fileInput = document.createElement("input");
  fileInput.type = "file";

  fileInput.setAttribute('id', this.assetable_type.toLowerCase()+"_assets_attributes_"+asset.asset_index+"_file");
  fileInput.setAttribute('name', this.assetable_type.toLowerCase()+"[assets_attributes]["+asset.asset_index+"][file]");

  var hiddenInput = document.createElement("input");
  hiddenInput.type = "hidden";
  hiddenInput.setAttribute('id', this.assetable_type.toLowerCase()+"_assets_attributes_"+asset.asset_index+"_id");
  hiddenInput.setAttribute('name', this.assetable_type.toLowerCase()+"[assets_attributes]["+asset.asset_index+"][id]");

  var listItem = document.createElement("li");
  listItem.appendChild(fileInput);
  listItem.appendChild(hiddenInput);

  return listItem;
};

(function (global) {
  this.uploaders = [];
  this.Uploader = Uploader;
  this.createUploader = function(element) {
    this.uploaders.push(new this.Uploader(element));
  };
  global.Herd = this;
}(window));